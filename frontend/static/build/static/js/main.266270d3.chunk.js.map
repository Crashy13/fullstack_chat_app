{"version":3,"sources":["Components/ChatWindow.js","Components/MessageInputs.js","Components/ChatApp.js","reportWebVitals.js","index.js"],"names":["ChatWindow","props","state","messages","fetch","then","response","json","data","setState","this","map","message","JSON","stringify","created_at","id","React","Component","MessageInputs","userinput","addMessage","bind","handleInput","e","target","name","value","options","method","headers","Cookies","get","body","input","onSubmit","type","onChange","ChatApp","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yOAiCeA,E,kDA9Bb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,SAAU,IAHK,E,qDAOnB,WAAqB,IAAD,OAClBC,MAAM,yBACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKC,SAAS,CAAEN,SAAUK,S,oBAK5C,WACE,IAAML,EAAWO,KAAKR,MAAMC,SAASQ,KAAI,SAAAC,GAAO,OAC9C,+BACE,4BAAIC,KAAKC,UAAUF,EAAQA,WAC3B,4BAAIA,EAAQG,eAFLH,EAAQI,OAKnB,OACE,mCACGb,Q,GAzBgBc,IAAMC,W,uCCyDhBC,E,kDAvDb,WAAYlB,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXkB,UAAW,GACXjB,SAAU,IAGZ,EAAKkB,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBARF,E,+CAYnB,SAAYE,GACVd,KAAKD,SAAL,eAAgBe,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,U,wBAG3C,SAAWH,GAAI,IAAD,OAENZ,EAAU,CACdA,QAASF,KAAKR,MAAMU,SAGhBgB,EAAU,CACdC,OAAQ,OACNC,QAAS,CACP,eAAgB,mBAChB,cAAeC,IAAQC,IAAI,cAE7BC,KAAMpB,KAAKC,UAAUF,IAGzBR,MAAM,wBAAyBwB,GAC5BvB,MAAK,SAAAC,GACJ,IAAMH,EAAQ,YAAO,EAAKD,MAAMC,UAChC,EAAKM,SAAS,CAAEN,kB,oBAMtB,WACE,IAAMiB,EAAYV,KAAKR,MAAMkB,UAAUT,KAAI,SAAAuB,GAAK,OAC9C,6BACA,4BAAId,EAAUc,SADLA,EAAMlB,OAIjB,OACE,uBAAMmB,SAAUzB,KAAKW,WAArB,UACA,uBAAOe,KAAK,OAAOV,KAAK,UAAUC,MAAOjB,KAAKR,MAAMU,QAASyB,SAAU3B,KAAKa,cAC5E,wBAAQa,KAAK,SAAb,yB,GAlDsBnB,IAAMC,WCsBnBoB,E,kDAnBb,WAAYrC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,GAFI,E,0CASnB,WACE,OACE,qCACE,cAAC,EAAD,CAAYC,SAAUO,KAAKR,MAAMC,WACjC,cAAC,EAAD,CAAeiB,UAAWV,KAAKR,MAAMgC,e,GAdvBjB,IAAMC,WCObqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBpC,MAAK,YAAkD,IAA/CqC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.266270d3.chunk.js","sourcesContent":["import React from 'react'\n\nclass ChatWindow extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      messages: [],\n    }\n  }\n\n  componentDidMount() {\n    fetch('/api/v1/chatmessages/')\n      .then(response => response.json())\n      .then(data => this.setState({ messages: data }));\n  }\n\n\n\n  render() {\n    const messages = this.state.messages.map(message => (\n      <li key={message.id}>\n        <p>{JSON.stringify(message.message)}</p>\n        <p>{message.created_at}</p>\n      </li>\n    ))\n    return(\n      <>\n        {messages}\n      </>\n    )\n  }\n}\n\nexport default ChatWindow\n","import React from 'react'\nimport Cookies from 'js-cookie';\n\nclass MessageInputs extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userinput: [],\n      messages: [],\n    }\n\n    this.addMessage = this.addMessage.bind(this)\n    this.handleInput = this.handleInput.bind(this)\n\n  }\n\n  handleInput(e) {\n    this.setState({[e.target.name]: e.target.value});\n  }\n\n  addMessage(e) {\n\n    const message = {\n      message: this.state.message,\n    };\n\n    const options = {\n      method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-CSRFToken': Cookies.get('csrftoken'),\n        },\n        body: JSON.stringify(message),\n    }\n\n    fetch('/api/v1/chatmessages/', options)\n      .then(response => {\n        const messages = [...this.state.messages];\n        this.setState({ messages })\n      })\n  }\n\n\n\n  render() {\n    const userinput = this.state.userinput.map(input => (\n      <li key={input.id}>\n      <p>{userinput.input}</p>\n      </li>\n    ))\n    return(\n      <form onSubmit={this.addMessage}>\n      <input type=\"text\" name=\"message\" value={this.state.message} onChange={this.handleInput}/>\n      <button type=\"submit\">Send</button>\n      </form>\n    )\n  }\n}\n\nexport default MessageInputs\n","import React from 'react';\nimport './App.css';\nimport ChatWindow from './ChatWindow'\nimport MessageInputs from './MessageInputs'\n\nclass ChatApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n\n    }\n  }\n\n\n\n  render(){\n    return (\n      <>\n        <ChatWindow messages={this.state.messages} />\n        <MessageInputs userinput={this.state.input} />\n      </>\n    )\n  }\n}\n\nexport default ChatApp;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport ChatApp from './Components/ChatApp';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChatApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}